<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for dim_nu_obs_value

The QoS configuration of the DDS entities in the generated example is 
loaded from this file.

This file is used only when it is in the current working directory
or when the enviroment variable
NDDS_QOS_PROFILES is defined and points to this file.

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="C:/Program Files (x86)/RTI/ndds.5.0.0/scripts/../resource/rtiddsgen/../qos_profiles_5.0.0/schema/rti_dds_qos_profiles.xsd"
     version="5.0.0">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="DocBox_Library">
        
       <qos_profile name="dim15_MDPnP_Profile" is_default_qos="true">
            <participant_qos>
                <participant_name>
                    <name>VideoThrough</name>
                </participant_name>
               <resource_limits> 
                <!-- 935926. the following changes were required to get around a crash that for some reason began occuring in 2013a. Same Sfuns ran fine in 12b. -->
                <type_object_max_serialized_length> 0 
                </type_object_max_serialized_length> 
                <type_object_max_deserialized_length> 0 
                </type_object_max_deserialized_length>
                <deserialized_type_object_dynamic_allocation_threshold> 0 
                </deserialized_type_object_dynamic_allocation_threshold> 
                <serialized_type_object_dynamic_allocation_threshold> 0 
                </serialized_type_object_dynamic_allocation_threshold> 
            </resource_limits>
            <!--Stops here-->

        <discovery>
             <!--Added from Mark's QOS Example for workaround-->

          <!-- promiscuous for the lab environment -->
          <accept_unknown_peers>true</accept_unknown_peers>
          <!-- multicast discovery -->
          <initial_peers>
            <element>udpv4://239.255.0.1</element>
          </initial_peers>
        </discovery>
        <discovery_config>
          <participant_liveliness_lease_duration>
            <sec>3</sec>
            <nanosec>0</nanosec>
          </participant_liveliness_lease_duration>
          <participant_liveliness_assert_period>
            <sec>0</sec>
            <nanosec>250000000</nanosec>
          </participant_liveliness_assert_period>
          <max_liveliness_loss_detection_period>
            <sec>3</sec>
            <nanosec>0</nanosec>
          </max_liveliness_loss_detection_period>
        </discovery_config>
        <!-- mainly to disable shared memory transport because I have a lot of
          trouble with it -->
        <transport_builtin>
          <mask>DDS_TRANSPORTBUILTIN_UDPv4
          </mask>
        </transport_builtin>
            </participant_qos>
	    <datareader_qos>

        <liveliness>
          <!-- Let DDS handle heartbeats -->
          <kind>DDS_AUTOMATIC_LIVELINESS_QOS</kind>
          <!-- Point at which writers (and associated instances) become "not alive" -->
          <lease_duration>
            <sec>2</sec>
            <nanosec>0</nanosec>
          </lease_duration>
        </liveliness>
        <durability>
          <!-- Writer is responsible for maintaining transient copies of samples
            ... see history -->
          <kind>DDS_TRANSIENT_LOCAL_DURABILITY_QOS</kind>
          <!-- Contact that writer directly to get the samples -->
          <direct_communication>DDS_BOOLEAN_TRUE</direct_communication>
        </durability>
        <reliability>
          <kind>RELIABLE_RELIABILITY_QOS</kind>
          <max_blocking_time>
            <sec>5</sec>
            <nanosec>0</nanosec>
          </max_blocking_time>
          <acknowledgment_kind>DDS_PROTOCOL_ACKNOWLEDGMENT_MODE
          </acknowledgment_kind>
        </reliability>
        <history>
          <!-- samples kept in the writer ... see durability -->
          <kind>KEEP_LAST_HISTORY_QOS</kind>
          <depth>1</depth>
          <refilter>DDS_NONE_REFILTER_QOS</refilter>
        </history>
        <!-- UDI is typical in the instance key so instances are owned exclusively
          by one publisher (device) -->
        <ownership>
          <kind>DDS_EXCLUSIVE_OWNERSHIP_QOS</kind>
        </ownership>
        <!-- Enabling lots of RTPS level fragmentation -->
        <reader_resource_limits>
          <max_fragments_per_sample>5000</max_fragments_per_sample>
          <max_query_condition_filters>32</max_query_condition_filters>
        </reader_resource_limits>
	    </datareader_qos>
	    <datawriter_qos>
        <liveliness>
          <!-- Let DDS handle heartbeats -->
          <kind>DDS_AUTOMATIC_LIVELINESS_QOS</kind>
          <!-- Point at which writers (and associated exclusively owned instances)
            become "not alive" -->
          <lease_duration>
            <sec>2</sec>
            <nanosec>0</nanosec>
          </lease_duration>
        </liveliness>
        <durability>
          <!-- Writer is responsible for maintaining transient copies of samples
            ... see history -->
          <kind>DDS_TRANSIENT_LOCAL_DURABILITY_QOS</kind>
          <!-- Contact that writer directly to get the samples -->
          <direct_communication>DDS_BOOLEAN_TRUE</direct_communication>
        </durability>
        <reliability>
          <kind>RELIABLE_RELIABILITY_QOS</kind>
          <max_blocking_time>
            <sec>3</sec>
            <nanosec>0</nanosec>
          </max_blocking_time>
          <acknowledgment_kind>DDS_PROTOCOL_ACKNOWLEDGMENT_MODE
          </acknowledgment_kind>
        </reliability>
        <history>
          <kind>KEEP_LAST_HISTORY_QOS</kind>
          <!-- samples kept in the writer ... see durability -->
          <depth>1</depth>
          <refilter>DDS_NONE_REFILTER_QOS</refilter>
        </history>
        <!-- UDI is typical in the instance key so instances are owned exclusively
          by one publisher (device) -->
        <ownership>
          <kind>DDS_EXCLUSIVE_OWNERSHIP_QOS</kind>
        </ownership>
        <!-- Enables RTPS fragmentation by allowing a separate thread to manage
          publication of samples in several fragments -->
        <publish_mode>
          <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
        </publish_mode>
        <protocol>
            <serialize_key_with_dispose>
                true
            </serialize_key_with_dispose>
        </protocol>
	    </datawriter_qos>
        </qos_profile>         
    </qos_library>
</dds>
